# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import minio_pb2 as minio__pb2


class MinioMethodsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetList = channel.unary_stream(
                '/minio_proto.MinioMethods/GetList',
                request_serializer=minio__pb2.User.SerializeToString,
                response_deserializer=minio__pb2.NoteResponse.FromString,
                )
        self.AddNote = channel.unary_unary(
                '/minio_proto.MinioMethods/AddNote',
                request_serializer=minio__pb2.NoteRequest.SerializeToString,
                response_deserializer=minio__pb2.Status.FromString,
                )
        self.EditNote = channel.unary_unary(
                '/minio_proto.MinioMethods/EditNote',
                request_serializer=minio__pb2.NoteRequest.SerializeToString,
                response_deserializer=minio__pb2.Status.FromString,
                )
        self.DeleteNote = channel.unary_unary(
                '/minio_proto.MinioMethods/DeleteNote',
                request_serializer=minio__pb2.NoteTitle.SerializeToString,
                response_deserializer=minio__pb2.Status.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/minio_proto.MinioMethods/AddUser',
                request_serializer=minio__pb2.User.SerializeToString,
                response_deserializer=minio__pb2.Status.FromString,
                )
        self.GetDate = channel.unary_unary(
                '/minio_proto.MinioMethods/GetDate',
                request_serializer=minio__pb2.NoteTitle.SerializeToString,
                response_deserializer=minio__pb2.NoteDate.FromString,
                )


class MinioMethodsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MinioMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetList': grpc.unary_stream_rpc_method_handler(
                    servicer.GetList,
                    request_deserializer=minio__pb2.User.FromString,
                    response_serializer=minio__pb2.NoteResponse.SerializeToString,
            ),
            'AddNote': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNote,
                    request_deserializer=minio__pb2.NoteRequest.FromString,
                    response_serializer=minio__pb2.Status.SerializeToString,
            ),
            'EditNote': grpc.unary_unary_rpc_method_handler(
                    servicer.EditNote,
                    request_deserializer=minio__pb2.NoteRequest.FromString,
                    response_serializer=minio__pb2.Status.SerializeToString,
            ),
            'DeleteNote': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNote,
                    request_deserializer=minio__pb2.NoteTitle.FromString,
                    response_serializer=minio__pb2.Status.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=minio__pb2.User.FromString,
                    response_serializer=minio__pb2.Status.SerializeToString,
            ),
            'GetDate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDate,
                    request_deserializer=minio__pb2.NoteTitle.FromString,
                    response_serializer=minio__pb2.NoteDate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minio_proto.MinioMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MinioMethods(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minio_proto.MinioMethods/GetList',
            minio__pb2.User.SerializeToString,
            minio__pb2.NoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minio_proto.MinioMethods/AddNote',
            minio__pb2.NoteRequest.SerializeToString,
            minio__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minio_proto.MinioMethods/EditNote',
            minio__pb2.NoteRequest.SerializeToString,
            minio__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minio_proto.MinioMethods/DeleteNote',
            minio__pb2.NoteTitle.SerializeToString,
            minio__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minio_proto.MinioMethods/AddUser',
            minio__pb2.User.SerializeToString,
            minio__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minio_proto.MinioMethods/GetDate',
            minio__pb2.NoteTitle.SerializeToString,
            minio__pb2.NoteDate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
